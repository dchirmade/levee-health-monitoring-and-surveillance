//
// 
// Levee Health Monitoring And Surveillance System (Real-time)
// Copyright (C) 2011 Fibercorps (http://www.fibercorps.com) 
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// GSoC11 Developer: Dipak 
// GSoC11 Dashboard: http://www.google-melange.com/gsoc/project/google/gsoc2011/q1w2e3r4/12001
// GSoC11 Mentor   : Dr.Raju Gottumukkala and Crawford Comeaux
//

Source code: 
https://code.google.com/p/levee-health-monitoring-and-surveillance/source/browse/trunk

Questionnaires:
https://code.google.com/p/levee-health-monitoring-and-surveillance/wiki/Questionnaires?ts=1313925872&updated=Questionnaires

Source tree: 
/levee-health-monitoring-and-surveillance
|
|-- cron-jobs                                                   ; Cronjobs to perform couple of jobs in background 
|   |-- refresh-noaa-water-feeds.bash                           ; To fetch noaa water feeds in background
|   `-- refresh-noaa-weather-feeds.bash                         ; To fetch noaa weather feeds in background
|-- documentations-presentation
|   `-- milestone-1.0-short-presentation.pdf                    ; Small presentation of POC-1 Initial demo
|-- INSTALL-PREREQUISITE.ubuntu                                 ; Automated package installation script for newbie
|-- levee-data-acquisition-system                                
|   |-- hardware-sensors
|   |   |-- arduino-hardware-sensors-eventbase.pde              ; Eventbase DA system 
|   |   `-- arduino-hardware-sensors-standalone.pde             ; Standalone DA system [ For getting started! ] 
|   `-- software-sensors
|       |-- dump                                                ; Dump data files (XML or RSS)
|       |   |-- MAIN.LIST                                       ; Master list for all weather stations in USA
|       |-- Makefile                                            ; Auto compilation file
|       |-- noaa-software-water-sensors.cpp                     ; NOAA water sensor code base. 
|       |-- noaa-software-water-sensors.hpp
|       |-- noaa-software-weather-sensors.cpp                   ; NOAA weather sensor code base. 
|       |-- noaa-software-weather-sensors.hpp
|       `-- sample-stations                                     ; Ready to go sample xml dump
|-- levee-mini-rule-engine
|   |-- alerts-delivery-system.hpp                              ; Alerts delivery system like sending mail
|   |-- configuration.conf                                      ; Configuration file for entire codebase
|   |-- configuration-file.cpp                                  ; Configuration file parser 
|   |-- configuration-file.hpp
|   |-- dump                                                    ; Dump data files (XML or RSS)
|   |-- knowledge-base.cpp                                      ; Knowledge base for monitoring system
|   |-- knowledge-base.hpp
|   |-- Makefile                                                ; Automated compilation scripts
|   |-- mini-rule-engine.cpp                                    ; Mini rule engine to build and execute rule based on actions
|   |-- mini-rule-engine.hpp
|   |-- noaa-software-water-sensors.cpp                         ; NOAA water sensors codebase to process water streams 
|   |-- noaa-software-water-sensors.hpp
|   |-- noaa-software-weather-sensors.cpp                       ; NOAA weather sensors codebase to process weather streams 
|   |-- noaa-software-weather-sensors.hpp
|   |-- serial-reader.cpp                                       ; Serial RS232 wrapper to deal with hardware sensor
|   |-- serial-reader.hpp
|   `-- tags
|-- optional-low-cost-host-system
|   `-- alix-CF-readme.txt                                      ; Installation procedure to install gnu/linux based ubutnu on CF/Alix
|-- README                                                      ; This file
`-- TODO                                                        ; Issue(s) list on code.google.com 


Questionnaires
How to compile and get start?
1? Checkout the souce code by refering: http://code.google.com/p/levee-health-monitoring-and-surveillance/source/checkout 
2? Then install all prerequisite dependencies packages by running ‘INSTALL-PREREQUISITE.ubuntu’ in main trunk directory. 
3? To compile levee-mini-rule-engine go to levee-mini-rule-engine and run ‘make’ 

How to install core system and how to configure cronjobs?
1? Automated script to configure with cron jobs could be found in http://code.google.com/p/levee-health-monitoring-and-surveillance/source/browse/trunk#trunk%2Fcron-jobs 
2? To configure cronjob add following lines into /etc/crontab and do ‘/etc/init.d/cron restart’ 
0-59/20 * * * * root /<checkoutpath>/sensors/levee-health-monitoring-and-surveillance/cron-jobs/refresh-noaa-water-feeds.bash 
0-59/15 * * * * root /<checkoutpath>/sensors/levee-health-monitoring-and-surveillance/cron-jobs/refresh-noaa-weather-feeds.bash
3? This codebase can be compiled and run with superuser permission directly. Currently no .rpm or .deb release package has been built as such. 

How to run standalone POC based on hardware sensors?
1? Please refer getting started guide for Arduino board on ‘http://arduino.cc/’ 
2? Burn source code located in http://code.google.com/p/levee-health-monitoring-and-surveillance/source/browse/trunk#trunk%2Flevee-data-acquisition-system%2Fhardware-sensors on Arduno board 

How to run core monitoring system?
1? Since all module generate their own binaries one can run them separately according to need. 
2? But you can run code monitoring engine by running ‘mini-rule-engine’. Of course please make sure if ‘configurations.conf’ is in place and well configured according to need. 

How to add/remove/suspend new rule in monitoring system?
1? Rule structure is pretty easy to understand and looks like 
int ruleIndex; // Rule index number 
bool isRuleActive; // If rule is active or inactive 
string ruleName; // Human readable rule name 
string ruleDescription; // Rule description if any 
unsigned int ruleAction; // Action attached with rule 
string rulePayload; // Any payload params needed by rule 
int ruleDelay; // Wait time in rule execution sequence 
int nextRuleIndex; // Next rule to be executed 
2? To Add rule call AppendNewRule? method with right parameters. 
Sample method could be located in mini-rule-engine.cpp 
Flag isRuleActive decides if rule need to be executed or skipped (logical deletion) 
3? One must need to define action method to handle any actions upon rule. br?

How to install system on small low cost mini embedded single board computer?
Please refer http://code.google.com/p/levee-health-monitoring-and-surveillance/source/browse/trunk/optional-low-cost-host-system/alix-CF-readme.txt 

How to do log rotation if debug mode enabled?
Which ever log file you’d like to rotate, rotate the same using http://linuxcommand.org/man_pages/logrotate8.html command. 

Under which license source code will be published?
All source code will be published under GNU general public license. 

Where is the Initial project development time line and activity?
It could be found here at http://www.google-melange.com/gsoc/project/google/gsoc2011/q1w2e3r4/12001 

Is there any demo logs, alerts logs?
https://code.google.com/p/levee-health-monitoring-and-surveillance/source/browse/trunk/documentations-presentation/sample-mini-rule-engine.log
